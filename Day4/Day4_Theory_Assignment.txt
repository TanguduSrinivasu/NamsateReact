(1) Is JSX mandatory for React?
JSX is not a requirement for using React. 
Using React without JSX is especially convenient when you don’t want to set up compilation in your build environment.
It is advisable to stick to JSX for your medium-sized or bigger projects. 
It still helps to understand what happens under the hood. For smaller React projects, where you don’t want to add a complex
build workflow, or for multi-page-applications, you could consider the JSX-less version though.

(2) Is ES6 mandatory for React?
No, ES6 is not mandatory for React but if you know ES6 it makes developer work easier for the development.
We can use javascript for React instead of ES6.

(3) How can I write comments in JSX?
JSX comments are written as follows:
{/*  */} - for multiline comments
// - for single line comment

(4) What is <React.Fragment></React.Fragment> and <></> ?
A common pattern in React is for a component to return multiple elements. 
Fragments let you group a list of children without adding extra nodes to the DOM.
key is the only attribute that can be passed to Fragment.
You can use <></> the same way you’d use any other element except that it doesn’t support keys or attributes.

(5) what is Virtual DOM?
Virtual DOm is the representation of the DOM in our code. It is not the React feature. It is the copy of the Actual DOM.
It is the epresentation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. 
This process is called reconciliation.
React uses Virtual DOM exists which is like a lightweight copy of the actual DOM(a virtual representation of the DOM). 
So for every object that exists in the original DOM, there is an object for that in React Virtual DOM. 
It is exactly the same, but it does not have the power to directly change the layout of the document. Manipulating DOM is slow, 
but manipulating Virtual DOM is fast as nothing gets drawn on the screen. 
So each time there is a change in the state of our application, the virtual DOM gets updated first instead of the real DOM. 

(6) What is Reconciliation in React?
Reconciliation is a process in which we use an Diffing algorithm to diff one tree 
with another to determine which parts need to be changed and then update in the original DOM.
Reconciliation is the algorithm for diffing two DOM trees. When the UI renders for the first time, 
React creates a tree of nodes. Every individual node represents the React element. 
It creates a virtual tree (which is known as virtualDOM) that’s a copy of the rendered DOM tree. After any update from the UI, 
it recursively compares every tree node from two trees. The cumulative changes are then passed to the renderer.

(7) What is React Fiber?
React Fiber is a concept of ReactJS that is used to render a system faster and smoother. 
React Fiber is the new reconciliation algorithm in React 16.
React Fiber is a completely backward-compatible rewrite of the old reconciler. 
This new reconciliation algorithm from React is called Fiber Reconciler. 

(8) Why we need keys in React? When do we need keys in React?
Keys help React identify which items have changed, are added, or are removed. 
Keys should be given to the elements inside the array to give the elements a stable identity.
React uses the key to match children in the old tree with children in the new tree.

(9) Can we use index as keys in React?
We don’t recommend using indexes for keys if the order of items may change. 
This can negatively impact performance and may cause issues with component state.
If we are not adding /removing items from list then it is fine to use index as keys else it will be good to use some id 
which uniquely identifies the item. Reason is if you add or remove some items from the list, 
indexes change for older items and react can get confused which items are changed.

(10) What are Props in React?
In ReactJS, the props are a type of object where the value of attributes of a tag is stored.
The word “props” implies “properties”, and its working functionality is quite similar to HTML attributes. 
Basically, these props components are read-only components. 
In ReactJS, the data can be passed from one component to another component using these props, 
similar to how the arguments are passed in a function. 
Inside the component, we can add the attributes called props; however, we cannot change or modify props inside the component 
as they are immutable.

(11) What is a Config Driven UI ?
When we build the real-world-App, your website should work for different location. 
We control the UI by using the config which is from backend/API.