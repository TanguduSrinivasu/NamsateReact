(1) What is JSX?
It is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. 
JSX may remind you of a template language, but it comes with the full power of JavaScript.
JSX produces React “elements”. 
JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.
JSX converts HTML tags into react elements.
You are not required to use JSX, but JSX makes it easier to write React applications.

Example 1:
JSX:
const myElement = <h1>I Love JSX!</h1>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);

Example 2:
Without JSX:
const myElement = React.createElement('h1', {}, 'I do not use JSX!');
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);


(2)Superpowers of JSX:
Using JSX, you can write markup inside Javascript, 
providing you with a superpower to write logic and markup of a component inside a single .jsx file.
Without JSX complex to handle and understand code. if you want to create a large Application in reacting so without JSX 
handle All component pieces of code are more difficult so using the JSX is handled to easily large applications.

We can not execute JSX code directly inside the browser because browser does not understand JSX so we required the compiler for 
executing JSX code to JavaScript. Babel is the compiler convert your JSX code into JavaScript. Here Babel working like Transfer JSX code into JavaScript 
and also you can use Babel compiler through the CDN(online).

JSX is Faster compared to normal JavaScript code.
using JSX you can create faster Application in React.


(3) Role of type attribute in script tag? What options can I use there?
The type attribute specifies the type of the script.
The type attribute identifies the content between the <script> and </script> tags.
The HTML <script> type Attribute is used to specify the MIME type of script and identify the content of the Tag. 
It has a Default value which is “text/javascript”.

Syntax: 

<script type="media_type">
Attribute Values: It contains a single value i.e media_type which specifies the MIME type of script.

Common “media_type” values are: 
text/javascript (this is default)
text/ecmascript
application/ecmascript
application/javascript


(4) {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.

{TitleComponent} : By seeing this we can say that it is a Javascript or a variable.
The {} can embed a javascript expression or a variable inside it.
<TitleComponent/> : This value represents a Component that is basically returning Some JSX value.
In simple terms TitleComponent a function that is returning a JSX value. A component is written inside the {<  />} expression.
<TitleComponent></TitleComponent> : <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only 
when < TitleComponent /> has no child components. 
The opening and closing tags are created to include the child components.

Example:
<TitleComponent>
    <FirstChildComponent />
    <SecondChildComponent />
    <ThirdChildComponent />
</TitleComponent>